# wjdlz/NOTE: ci@1.0.4-00
name: apps-desktop | wf

on:
  push:
    branches: [timeline]
    paths:
      - '.github/workflows/apps-desktop.yml'
      - 'v/handbooks/ci.md'
    tags:
      - 'v*'

jobs:
  build-and-release:
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        include:
          - os: macos-latest
            artifact_name: macos-artifacts
            artifact_glob: 'make/**/*.dmg'
          - os: windows-latest
            artifact_name: windows-artifacts
            artifact_glob: 'make/**/*.exe'
          - os: ubuntu-latest
            artifact_name: linux-artifacts
            artifact_glob: 'make/**/*.{deb,rpm,AppImage}'

    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-node

      - uses: ./.github/actions/setup-certificates
        with:
          platform: ${{ runner.os }}
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          WINDOWS_PFX: ${{ secrets.WINDOWS_PFX }}
          WINDOWS_PFX_PASSWORD: ${{ secrets.WINDOWS_PFX_PASSWORD }}

      - name: Setup ImageMagick
        if: runner.os == 'Windows'
        uses: mfinelli/setup-imagemagick@v3

      - uses: ./.github/actions/setup-icons
        env:
          APP_ICON_PATH: ${{ secrets.APP_ICON_PATH }}

      - name: Build and publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          WINDOWS_PFX_PASSWORD: ${{ secrets.WINDOWS_PFX_PASSWORD }}
        run: |
          pnpm run make
          pnpm run publish

      - name: Create artifact archive
        shell: bash
        run: |
          cd out
          if [ "${{ runner.os }}" == "Windows" ]; then
            7z a ../${{ matrix.artifact_name }}.zip ${{ matrix.artifact_glob }}
          else
            zip -r ../${{ matrix.artifact_name }}.zip ${{ matrix.artifact_glob }}
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_name }}.zip
          if-no-files-found: error

      - name: Create Release
        if: runner.os == 'Linux'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Download artifacts from other platforms
          mkdir -p artifacts
          gh run download --dir artifacts --pattern '*.zip'

          # Create release with all artifacts
          assets=()
          for zip in artifacts/*.zip *.zip; do
            if [ -f "$zip" ]; then
              assets+=("$zip")
            fi
          done

          gh release create "${{ github.ref_name }}" \
            --title "Release ${{ github.ref_name }}" \
            --draft=false \
            --prerelease=false \
            "${assets[@]}"
