# wjdlz/NOTE: ci@1.0.4-trigger
name: apps-desktop-test | wf

on:
  push:
    branches: [timeline]
    paths:
      - '.github/workflows/apps-desktop-test.yml'
      - 'v/handbooks/ci.md'
    tags:
      - 'v*'

env:
  REPO: ${{ inputs.GIT_REPO || 'vezham/v0xFE-apps-desktop' }}
  BRANCH: ${{ inputs.GIT_BRANCH || 'timeline' }}
  CI_DIR: ./v/bin/ci
  # ENTRY_POINT: ./
  # DX_APP_PATH:
  # DX_APP_NAME:
  # NX_APP_NAME:

jobs:
  build_and_deploy:
    strategy:
      matrix:
        node-version: [20]
        pnpm-version: [9.6.0]
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    # defaults:
    #   run:
    #     working-directory: ${{ env.ENTRY_POINT }}
    steps:
      - name: checkout | ${{ env.REPO }}@${{ env.BRANCH }}
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REPO }}
          ref: ${{ env.BRANCH }}

      # wjdlz/TODO: ci-setup | fetch-credentials - via vezham CI host

      # - name: ci-setup | extract $ENV_TOKENS
      # - name: ci-setup | gen $ENV_TOKENS

      - name: ci-setup | short-sha
        uses: benjlevesque/short-sha@v3.0
        id: short-sha

      - name: ci-setup | $SHA
        run: |
          echo 'SHA=${{ steps.short-sha.outputs.sha }}' >> $GITHUB_ENV

      # - name: ci-setup | gen DX_APP_URL

      # - name: setup | pnpm
      #   uses: pnpm/action-setup@v4
      #   with:
      #     version: ${{ matrix.pnpm-version }}

      # - name: setup | node env
      #   uses: actions/setup-node@v4
      #   with:
      #     node-version: ${{ matrix.node-version }}
      #     cache: 'pnpm'
      #     cache-dependency-path: '**/pnpm-lock.yaml'

      - uses: ./.github/actions/setup-node
      # - name: ci-setup | NODE Install
      #   shell: bash
      #   run: |
      #     # wjdlz/NOTE: extract & mask credentials
      #     git update-index --chmod=+x ${{ env.CI_DIR }}/scripts/install.sh

      # - name: ci-setup | NODE Install
      #   shell: bash
      #   run: |
      #     # wjdlz/NOTE: extract & mask credentials
      #     git update-index --chmod=+x ${{ env.CI_DIR }}/scripts/install.sh

      # - name: Setup pnpm cache
      #   uses: actions/cache@v4
      #   with:
      #     path: ${{ env.STORE_PATH }}
      #     key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
      #     restore-keys: |
      #       ${{ runner.os }}-pnpm-store-

      # - name: Install dependencies
      #   run: pnpm install --frozen-lockfile

      - name: Make Electron app
        run: pnpm make

      - name: logs | post dir
        run: pwd

      - name: logs | ls
        run: ls

      - name: Zip artifacts
        shell: bash
        run: |
          cd build/prod/make
          if [ "${{ runner.os }}" == "Windows" ]; then
            7z a ../../windows-artifacts.zip ./**/*.exe
          elif [ "${{ runner.os }}" == "macOS" ]; then
            zip -r ../../macos-artifacts.zip ./**/*.dmg
          else
            zip -r ../../linux-artifacts.zip ./**/*.{deb,rpm,AppImage}
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-builds
          path: |
            *-artifacts.zip
          if-no-files-found: ignore

  create-release:
    needs: build_and_deploy
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ github.ref_name }} \
            --title "Release ${{ github.ref_name }}" \
            --draft=false \
            --prerelease=false \
            artifacts/**/*.zip
